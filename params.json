{
  "name": "Imageloader",
  "tagline": "Android image loader library",
  "body": "# ImageLoader\r\nAndroid image loader library\r\n\r\n## Usage\r\n\r\n### mvn:\r\n```\r\n<dependency>\r\n  <groupId>dev.nick</groupId>\r\n  <artifactId>imageloader</artifactId>\r\n  <version>0.2</version>\r\n  <type>pom</type>\r\n</dependency>\r\n```\r\n\r\n### gradle\r\n```\r\ncompile 'dev.nick:imageloader:0.2'\r\n```\r\n\r\n## Samples\r\n\r\n### Config:\r\n```java\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        ImageLoader.init(getApplicationContext(), new LoaderConfig.Builder()\r\n                        .cachePolicy(new CachePolicy.Builder()\r\n                        .preferredLocation(CachePolicy.Location.EXTERNAL)\r\n                                .compressFormat(Bitmap.CompressFormat.PNG)\r\n                                .build())\r\n                        .cachingThreads(Runtime.getRuntime().availableProcessors())\r\n                        .loadingThreads(Runtime.getRuntime().availableProcessors() * 2)\r\n                        .diskCacheEnabled(true)\r\n                        .memCacheEnabled(true)\r\n                        .debug(true)\r\n                        .build());\r\n    }\r\n}\r\n```\r\n\r\n### Loading:\r\n```java\r\nImageLoader.getInstance().displayImage(uri, holder.imageView,\r\n                        new DisplayOption.Builder()\r\n                                .imageQuality(DisplayOption.ImageQuality.FIT_VIEW)\r\n                                .loadingImgRes(R.drawable.ic_cloud_download_black_24dp)\r\n                                .defaultImgRes(R.drawable.ic_broken_image_black_24dp)\r\n                                .bitmapProcessor(new BlackWhiteBitmapProcessor())\r\n                                .imageAnimator(new FadeInImageAnimator())\r\n                                .build());\r\n```\r\n\r\n### Freeze:\r\n```java\r\nImageLoader.getInstance().freeze();\r\n```\r\n\r\n### Resume:\r\n```java\r\nImageLoader.getInstance().resume();\r\n```\r\n\r\n### Clear tasks:\r\n```java\r\nImageLoader.getInstance().clearTasks();\r\n```\r\n\r\n### Terminate:\r\n```java\r\nImageLoader.getInstance().terminate();\r\n```\r\n\r\n### Clear cache:\r\n```java\r\n @Override\r\n    public void onTrimMemory(int level) {\r\n        super.onTrimMemory(level);\r\n        ImageLoader.getInstance().clearMemCache();\r\n    }\r\n```\r\n```java\r\n@Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        ImageLoader.getInstance().clearAllCache();\r\n    }\r\n```\r\n\r\n## Supported content:\r\n```java\r\nfile://\r\n```\r\n```java\r\ncontent://\r\n```\r\n```java\r\nhttp://\r\n```\r\n```java\r\nassets://\r\n```\r\n```java\r\ndrawable://\r\n```\r\n\r\n### Contact me\r\n```java\r\nnick.guo.dev@icloud.com\r\n```\r\n```java\r\nnick.guo.dev@gmail.com\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}